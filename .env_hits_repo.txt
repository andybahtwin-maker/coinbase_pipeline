.env:3:CDP_API_KEY_FILE=./cdp_api_key.json
.env:5:CB_API_KEY=
.env:19:NOTION_TOKEN=
dashboard/simple_app.py:259:    OPENAI_KEY = os.getenv("OPENAI_API_KEY")
dashboard/simple_app.py:260:    GROQ_KEY = os.getenv("GROQ_API_KEY")
dashboard/simple_app.py:263:        st.info("Set OPENAI_API_KEY or GROQ_API_KEY in .env to enable AI summaries.")
run.sh:22:    : "${NOTION_TOKEN:?Set NOTION_TOKEN in env}"
.env.backup:3:CDP_API_KEY_FILE=./cdp_api_key.json
.env.backup:5:CB_API_KEY=
.env.backup:19:NOTION_TOKEN=
.venv/lib64/python3.12/site-packages/openai/__init__.py:281:    return _os.environ.get("OPENAI_API_KEY") is not None
.venv/lib64/python3.12/site-packages/openai/__init__.py:285:    return azure_endpoint is not None or _os.environ.get("AZURE_OPENAI_API_KEY") is not None
.venv/lib64/python3.12/site-packages/openai/__init__.py:323:                "AZURE_OPENAI_API_KEY"
.venv/lib64/python3.12/site-packages/openai/_client.py:127:        - `api_key` from `OPENAI_API_KEY`
.venv/lib64/python3.12/site-packages/openai/_client.py:133:            api_key = os.environ.get("OPENAI_API_KEY")
.venv/lib64/python3.12/site-packages/openai/_client.py:136:                "The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable"
.venv/lib64/python3.12/site-packages/openai/_client.py:472:        - `api_key` from `OPENAI_API_KEY`
.venv/lib64/python3.12/site-packages/openai/_client.py:478:            api_key = os.environ.get("OPENAI_API_KEY")
.venv/lib64/python3.12/site-packages/openai/_client.py:481:                "The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable"
.venv/lib64/python3.12/site-packages/openai/lib/azure.py:175:        - `api_key` from `AZURE_OPENAI_API_KEY`
.venv/lib64/python3.12/site-packages/openai/lib/azure.py:193:            api_key = os.environ.get("AZURE_OPENAI_API_KEY")
.venv/lib64/python3.12/site-packages/openai/lib/azure.py:200:                "Missing credentials. Please pass one of `api_key`, `azure_ad_token`, `azure_ad_token_provider`, or the `AZURE_OPENAI_API_KEY` or `AZURE_OPENAI_AD_TOKEN` environment variables."
.venv/lib64/python3.12/site-packages/openai/lib/azure.py:456:        - `api_key` from `AZURE_OPENAI_API_KEY`
.venv/lib64/python3.12/site-packages/openai/lib/azure.py:474:            api_key = os.environ.get("AZURE_OPENAI_API_KEY")
.venv/lib64/python3.12/site-packages/openai/lib/azure.py:481:                "Missing credentials. Please pass one of `api_key`, `azure_ad_token`, `azure_ad_token_provider`, or the `AZURE_OPENAI_API_KEY` or `AZURE_OPENAI_AD_TOKEN` environment variables."
.venv/lib64/python3.12/site-packages/groq/_client.py:74:        This automatically infers the `api_key` argument from the `GROQ_API_KEY` environment variable if it is not provided.
.venv/lib64/python3.12/site-packages/groq/_client.py:77:            api_key = os.environ.get("GROQ_API_KEY")
.venv/lib64/python3.12/site-packages/groq/_client.py:80:                "The api_key client option must be set either by passing api_key to the client or by setting the GROQ_API_KEY environment variable"
.venv/lib64/python3.12/site-packages/groq/_client.py:278:        This automatically infers the `api_key` argument from the `GROQ_API_KEY` environment variable if it is not provided.
.venv/lib64/python3.12/site-packages/groq/_client.py:281:            api_key = os.environ.get("GROQ_API_KEY")
.venv/lib64/python3.12/site-packages/groq/_client.py:284:                "The api_key client option must be set either by passing api_key to the client or by setting the GROQ_API_KEY environment variable"
.venv/lib64/python3.12/site-packages/groq-0.31.1.dist-info/METADATA:67:    api_key=os.environ.get("GROQ_API_KEY"),  # This is the default and can be omitted
.venv/lib64/python3.12/site-packages/groq-0.31.1.dist-info/METADATA:84:to add `GROQ_API_KEY="My API Key"` to your `.env` file
.venv/lib64/python3.12/site-packages/groq-0.31.1.dist-info/METADATA:97:    api_key=os.environ.get("GROQ_API_KEY"),  # This is the default and can be omitted
.venv/lib64/python3.12/site-packages/notion_client-2.5.0.dist-info/METADATA:78:notion = Client(auth=os.environ["NOTION_TOKEN"])
.venv/lib64/python3.12/site-packages/notion_client-2.5.0.dist-info/METADATA:86:notion = AsyncClient(auth=os.environ["NOTION_TOKEN"])
.venv/lib64/python3.12/site-packages/notion_client-2.5.0.dist-info/METADATA:180:    auth=os.environ["NOTION_TOKEN"],
.venv/lib64/python3.12/site-packages/notion_client-2.5.0.dist-info/METADATA:269:up the environment variables `NOTION_TOKEN` and `NOTION_TEST_PAGE_ID` (a page
.venv/lib64/python3.12/site-packages/openai-1.107.3.dist-info/METADATA:81:    api_key=os.environ.get("OPENAI_API_KEY"),
.venv/lib64/python3.12/site-packages/openai-1.107.3.dist-info/METADATA:116:to add `OPENAI_API_KEY="My API Key"` to your `.env` file
.venv/lib64/python3.12/site-packages/openai-1.107.3.dist-info/METADATA:179:    api_key=os.environ.get("OPENAI_API_KEY"),
.venv/lib64/python3.12/site-packages/openai-1.107.3.dist-info/METADATA:846:# gets the API Key from environment variable AZURE_OPENAI_API_KEY
.venv/lib/python3.12/site-packages/openai/__init__.py:281:    return _os.environ.get("OPENAI_API_KEY") is not None
.venv/lib/python3.12/site-packages/openai/__init__.py:285:    return azure_endpoint is not None or _os.environ.get("AZURE_OPENAI_API_KEY") is not None
.venv/lib/python3.12/site-packages/openai/__init__.py:323:                "AZURE_OPENAI_API_KEY"
.venv/lib/python3.12/site-packages/openai/_client.py:127:        - `api_key` from `OPENAI_API_KEY`
.venv/lib/python3.12/site-packages/openai/_client.py:133:            api_key = os.environ.get("OPENAI_API_KEY")
.venv/lib/python3.12/site-packages/openai/_client.py:136:                "The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable"
.venv/lib/python3.12/site-packages/openai/_client.py:472:        - `api_key` from `OPENAI_API_KEY`
.venv/lib/python3.12/site-packages/openai/_client.py:478:            api_key = os.environ.get("OPENAI_API_KEY")
.venv/lib/python3.12/site-packages/openai/_client.py:481:                "The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable"
.venv/lib/python3.12/site-packages/openai/lib/azure.py:175:        - `api_key` from `AZURE_OPENAI_API_KEY`
.venv/lib/python3.12/site-packages/openai/lib/azure.py:193:            api_key = os.environ.get("AZURE_OPENAI_API_KEY")
.venv/lib/python3.12/site-packages/openai/lib/azure.py:200:                "Missing credentials. Please pass one of `api_key`, `azure_ad_token`, `azure_ad_token_provider`, or the `AZURE_OPENAI_API_KEY` or `AZURE_OPENAI_AD_TOKEN` environment variables."
.venv/lib/python3.12/site-packages/openai/lib/azure.py:456:        - `api_key` from `AZURE_OPENAI_API_KEY`
.venv/lib/python3.12/site-packages/openai/lib/azure.py:474:            api_key = os.environ.get("AZURE_OPENAI_API_KEY")
.venv/lib/python3.12/site-packages/openai/lib/azure.py:481:                "Missing credentials. Please pass one of `api_key`, `azure_ad_token`, `azure_ad_token_provider`, or the `AZURE_OPENAI_API_KEY` or `AZURE_OPENAI_AD_TOKEN` environment variables."
.venv/lib/python3.12/site-packages/groq/_client.py:74:        This automatically infers the `api_key` argument from the `GROQ_API_KEY` environment variable if it is not provided.
.venv/lib/python3.12/site-packages/groq/_client.py:77:            api_key = os.environ.get("GROQ_API_KEY")
.venv/lib/python3.12/site-packages/groq/_client.py:80:                "The api_key client option must be set either by passing api_key to the client or by setting the GROQ_API_KEY environment variable"
.venv/lib/python3.12/site-packages/groq/_client.py:278:        This automatically infers the `api_key` argument from the `GROQ_API_KEY` environment variable if it is not provided.
.venv/lib/python3.12/site-packages/groq/_client.py:281:            api_key = os.environ.get("GROQ_API_KEY")
.venv/lib/python3.12/site-packages/groq/_client.py:284:                "The api_key client option must be set either by passing api_key to the client or by setting the GROQ_API_KEY environment variable"
.venv/lib/python3.12/site-packages/groq-0.31.1.dist-info/METADATA:67:    api_key=os.environ.get("GROQ_API_KEY"),  # This is the default and can be omitted
.venv/lib/python3.12/site-packages/groq-0.31.1.dist-info/METADATA:84:to add `GROQ_API_KEY="My API Key"` to your `.env` file
.venv/lib/python3.12/site-packages/groq-0.31.1.dist-info/METADATA:97:    api_key=os.environ.get("GROQ_API_KEY"),  # This is the default and can be omitted
.venv/lib/python3.12/site-packages/notion_client-2.5.0.dist-info/METADATA:78:notion = Client(auth=os.environ["NOTION_TOKEN"])
.venv/lib/python3.12/site-packages/notion_client-2.5.0.dist-info/METADATA:86:notion = AsyncClient(auth=os.environ["NOTION_TOKEN"])
.venv/lib/python3.12/site-packages/notion_client-2.5.0.dist-info/METADATA:180:    auth=os.environ["NOTION_TOKEN"],
.venv/lib/python3.12/site-packages/notion_client-2.5.0.dist-info/METADATA:269:up the environment variables `NOTION_TOKEN` and `NOTION_TEST_PAGE_ID` (a page
.venv/lib/python3.12/site-packages/openai-1.107.3.dist-info/METADATA:81:    api_key=os.environ.get("OPENAI_API_KEY"),
.venv/lib/python3.12/site-packages/openai-1.107.3.dist-info/METADATA:116:to add `OPENAI_API_KEY="My API Key"` to your `.env` file
.venv/lib/python3.12/site-packages/openai-1.107.3.dist-info/METADATA:179:    api_key=os.environ.get("OPENAI_API_KEY"),
.venv/lib/python3.12/site-packages/openai-1.107.3.dist-info/METADATA:846:# gets the API Key from environment variable AZURE_OPENAI_API_KEY
README.md:18:Optional: put your Coinbase key JSON at \`./cdp_api_key.json\` or set \`CB_API_KEY/CB_API_SECRET/CB_API_PASSPHRASE\` in \`.env\`.
.env_hits_repo.txt:1:.env:3:CDP_API_KEY_FILE=./cdp_api_key.json
.env_hits_repo.txt:2:.env:5:CB_API_KEY=
.env_hits_repo.txt:3:.env:19:NOTION_TOKEN=
.env_hits_repo.txt:4:dashboard/simple_app.py:259:    OPENAI_KEY = os.getenv("OPENAI_API_KEY")
.env_hits_repo.txt:5:dashboard/simple_app.py:260:    GROQ_KEY = os.getenv("GROQ_API_KEY")
.env_hits_repo.txt:6:dashboard/simple_app.py:263:        st.info("Set OPENAI_API_KEY or GROQ_API_KEY in .env to enable AI summaries.")
.env_hits_repo.txt:7:run.sh:22:    : "${NOTION_TOKEN:?Set NOTION_TOKEN in env}"
.env_hits_repo.txt:8:.env.backup:3:CDP_API_KEY_FILE=./cdp_api_key.json
.env_hits_repo.txt:9:.env.backup:5:CB_API_KEY=
.env_hits_repo.txt:10:.env.backup:19:NOTION_TOKEN=
.env_hits_repo.txt:11:.venv/lib64/python3.12/site-packages/openai/__init__.py:281:    return _os.environ.get("OPENAI_API_KEY") is not None
.env_hits_repo.txt:12:.venv/lib64/python3.12/site-packages/openai/__init__.py:285:    return azure_endpoint is not None or _os.environ.get("AZURE_OPENAI_API_KEY") is not None
.env_hits_repo.txt:13:.venv/lib64/python3.12/site-packages/openai/__init__.py:323:                "AZURE_OPENAI_API_KEY"
.env_hits_repo.txt:14:.venv/lib64/python3.12/site-packages/openai/_client.py:127:        - `api_key` from `OPENAI_API_KEY`
.env_hits_repo.txt:15:.venv/lib64/python3.12/site-packages/openai/_client.py:133:            api_key = os.environ.get("OPENAI_API_KEY")
.env_hits_repo.txt:16:.venv/lib64/python3.12/site-packages/openai/_client.py:136:                "The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable"
.env_hits_repo.txt:17:.venv/lib64/python3.12/site-packages/openai/_client.py:472:        - `api_key` from `OPENAI_API_KEY`
.env_hits_repo.txt:18:.venv/lib64/python3.12/site-packages/openai/_client.py:478:            api_key = os.environ.get("OPENAI_API_KEY")
.env_hits_repo.txt:19:.venv/lib64/python3.12/site-packages/openai/_client.py:481:                "The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable"
.env_hits_repo.txt:20:.venv/lib64/python3.12/site-packages/openai/lib/azure.py:175:        - `api_key` from `AZURE_OPENAI_API_KEY`
.env_hits_repo.txt:21:.venv/lib64/python3.12/site-packages/openai/lib/azure.py:193:            api_key = os.environ.get("AZURE_OPENAI_API_KEY")
.env_hits_repo.txt:22:.venv/lib64/python3.12/site-packages/openai/lib/azure.py:200:                "Missing credentials. Please pass one of `api_key`, `azure_ad_token`, `azure_ad_token_provider`, or the `AZURE_OPENAI_API_KEY` or `AZURE_OPENAI_AD_TOKEN` environment variables."
.env_hits_repo.txt:23:.venv/lib64/python3.12/site-packages/openai/lib/azure.py:456:        - `api_key` from `AZURE_OPENAI_API_KEY`
.env_hits_repo.txt:24:.venv/lib64/python3.12/site-packages/openai/lib/azure.py:474:            api_key = os.environ.get("AZURE_OPENAI_API_KEY")
.env_hits_repo.txt:25:.venv/lib64/python3.12/site-packages/openai/lib/azure.py:481:                "Missing credentials. Please pass one of `api_key`, `azure_ad_token`, `azure_ad_token_provider`, or the `AZURE_OPENAI_API_KEY` or `AZURE_OPENAI_AD_TOKEN` environment variables."
.env_hits_repo.txt:26:.venv/lib64/python3.12/site-packages/groq/_client.py:74:        This automatically infers the `api_key` argument from the `GROQ_API_KEY` environment variable if it is not provided.
.env_hits_repo.txt:27:.venv/lib64/python3.12/site-packages/groq/_client.py:77:            api_key = os.environ.get("GROQ_API_KEY")
.env_hits_repo.txt:28:.venv/lib64/python3.12/site-packages/groq/_client.py:80:                "The api_key client option must be set either by passing api_key to the client or by setting the GROQ_API_KEY environment variable"
.env_hits_repo.txt:29:.venv/lib64/python3.12/site-packages/groq/_client.py:278:        This automatically infers the `api_key` argument from the `GROQ_API_KEY` environment variable if it is not provided.
.env_hits_repo.txt:30:.venv/lib64/python3.12/site-packages/groq/_client.py:281:            api_key = os.environ.get("GROQ_API_KEY")
.env_hits_repo.txt:31:.venv/lib64/python3.12/site-packages/groq/_client.py:284:                "The api_key client option must be set either by passing api_key to the client or by setting the GROQ_API_KEY environment variable"
.env_hits_repo.txt:32:.venv/lib64/python3.12/site-packages/groq-0.31.1.dist-info/METADATA:67:    api_key=os.environ.get("GROQ_API_KEY"),  # This is the default and can be omitted
.env_hits_repo.txt:33:.venv/lib64/python3.12/site-packages/groq-0.31.1.dist-info/METADATA:84:to add `GROQ_API_KEY="My API Key"` to your `.env` file
.env_hits_repo.txt:34:.venv/lib64/python3.12/site-packages/groq-0.31.1.dist-info/METADATA:97:    api_key=os.environ.get("GROQ_API_KEY"),  # This is the
providers/coinbase_adv.py:11:    api_key = os.getenv("COINBASE_API_KEY") or os.getenv("CB_API_KEY")
scripts/route_all_publish_to_fixed_page.sh:24:    token = os.environ.get("NOTION_TOKEN") or os.environ.get("NOTION_API_KEY")
scripts/notion_env_compat_and_run.sh:5:# Compatibility: accept NOTION_SECRET, NOTION_API_KEY, or NOTION_TOKEN
scripts/notion_env_compat_and_run.sh:6:if [[ -z "${NOTION_TOKEN:-}" && -n "${NOTION_SECRET:-}" ]]; then
scripts/notion_env_compat_and_run.sh:7:  export NOTION_TOKEN="$NOTION_SECRET"
scripts/notion_env_compat_and_run.sh:9:if [[ -z "${NOTION_TOKEN:-}" && -n "${NOTION_API_KEY:-}" ]]; then
scripts/notion_env_compat_and_run.sh:10:  export NOTION_TOKEN="$NOTION_API_KEY"
scripts/publish_notion_fixed_page.sh:16:export NOTION_TOKEN="${NOTION_TOKEN:-${NOTION_API_KEY:-}}"
scripts/run_notion_bridge_use_repo_env.sh:14:: "${NOTION_TOKEN:?NOTION_TOKEN missing}"
scripts/patch_notion_update_fixed_page.sh:19:    Loads .env, maps NOTION_API_KEY/PAGE_ID -> NOTION_TOKEN/PARENT_PAGE_ID for compatibility.
scripts/patch_notion_update_fixed_page.sh:33:    token = os.environ.get("NOTION_TOKEN") or os.environ.get("NOTION_API_KEY")
scripts/patch_notion_update_fixed_page.sh:35:        raise RuntimeError("Notion token missing (NOTION_TOKEN or NOTION_API_KEY)")
scripts/patch_notion_update_fixed_page.sh:127:export NOTION_TOKEN="${NOTION_TOKEN:-${NOTION_API_KEY:-}}"
scripts/setup_arbitrage_suite.sh:81:    api_key = os.getenv("COINBASE_API_KEY") or os.getenv("CB_API_KEY")
scripts/setup_arbitrage_suite.sh:464:    token = os.environ.get("NOTION_TOKEN") or os.environ.get("NOTION_API_KEY")
scripts/setup_arbitrage_suite.sh:544:export NOTION_TOKEN="${NOTION_TOKEN:-${NOTION_API_KEY:-}}"
scripts/recover_env.sh:22:  -E 'GROQ_API_KEY|OPENAI_API_KEY|CB_API_KEY|CDP_API_KEY_FILE|NOTION_TOKEN' \
scripts/recover_env.sh:29:  [ -f "$f" ] && RC_HITS+=$(grep -nE 'GROQ_API_KEY|OPENAI_API_KEY|CB_API_KEY|CDP_API_KEY_FILE|NOTION_TOKEN' "$f" || true; echo)
scripts/recover_env.sh:43:# Attempt automated recovery: pick the most recent file containing GROQ_API_KEY or OPENAI_API_KEY
scripts/recover_env.sh:48:  if [ -f "$p" ] && grep -qE '^(GROQ_API_KEY|OPENAI_API_KEY)=' "$p"; then
scripts/recover_env.sh:62:  if [ -f "$p" ] && grep -qE '^(CB_API_KEY|CDP_API_KEY_FILE)=' "$p"; then
scripts/recover_env.sh:70:  echo "==> Wrote .env.recovered (add GROQ_API_KEY manually)."
scripts/patch_notion_publish_harden.sh:27:    token = os.environ.get("NOTION_TOKEN") or os.environ.get("NOTION_API_KEY")
scripts/patch_notion_publish_harden.sh:30:        raise RuntimeError("Notion env missing: need NOTION_TOKEN/NOTION_API_KEY and NOTION_PARENT_PAGE_ID/NOTION_PAGE_ID")
scripts/notion_env_template.sh:3:export NOTION_TOKEN="YOUR_NOTION_INTEGRATION_SECRET"
scripts/publish_notion_colored.sh:6:export NOTION_TOKEN="${NOTION_TOKEN:-${NOTION_API_KEY:-}}"
scripts/patch_bridge_env_autoload.sh:23:if not os.environ.get("NOTION_TOKEN") and os.environ.get("NOTION_API_KEY"):
scripts/patch_bridge_env_autoload.sh:24:    os.environ["NOTION_TOKEN"] = os.environ["NOTION_API_KEY"]
notion_publish.py:52:    token = os.getenv("NOTION_TOKEN") or os.getenv("NOTION_SECRET") or os.getenv("NOTION_API_KEY")
notion_publish.py:54:        return False, "No NOTION_TOKEN/NOTION_SECRET found; skipping Notion publish."
